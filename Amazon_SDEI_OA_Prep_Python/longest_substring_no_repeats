'''
Given a string s, find the length of the longest substring without repeating characters
'''

def lengthOfLongestSubstring(s: str) -> int:
    l = 0
    longest = 0
    sett = set()
    n = len(s)

    for r in range(n):
        while s[r] in sett:
            sett.remove(s[l])
            l += 1

        w = (r - l) + 1
        longest = max(longest, w)
        sett.add(s[r])

    return longest

print(lengthOfLongestSubstring("abcabcbb"))

'''
Iteration r = 0: w = 0-0+1 = 1
longest = 1
sett = ('a')

Iteration r = 1: w = 1-0+1 = 2
longest = 2
sett = ('a', 'b')

Iteration r = 2: w = 2-0+1 = 3
longest = 3
sett = ('a', 'b', 'c')

Iteration r = 3: a is in sett!
start the left pointer catchup routine
sett.remove(s[0])

sett = ('b', 'c')
l = 1
w = 3-1+1 = 3
longest = max(3,3) = 3
sett = ('b', 'c', 'a')

Iteration r = 4: b is in sett!
start left pointer catchup routine
sett.remove(s[1])

sett = ('c', 'a')
w = 4-2+1 = 3
longest = max(3,3) = 3


'''
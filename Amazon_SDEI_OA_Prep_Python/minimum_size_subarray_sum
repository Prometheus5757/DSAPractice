'''
Given an array of positive integers nums and a positive integer target, find the minimal length of a contiguous subarray of which the sum is greater than or equal to target. If no such subarray exists, return 0 instead.

Example:
nums = [2,3,1,2,4,3], target = 7
Output: 2
Explanation: The subarray [4,3] has the sum = 7 which is equal to the target.
'''

def minLengthSubarray(nums, target):
    minLength = float('inf')
    currSum = 0
    l = 0

    #sliding window
    for r in range(len(nums)):
        #add the current number to the sum
        currSum += nums[r]
        #keep going until we are greater than or equal to the target, meaning we have reached the sum we want
        while currSum >= target:
            #keep subtracting the length until the sum drops below target
            minLength = min(minLength, r - l + 1)
            currSum -= nums[l]
            l += 1

    return minLength if minLength != float('inf') else 0

print(minLengthSubarray([2,3,1,2,4,3], 7))
        

